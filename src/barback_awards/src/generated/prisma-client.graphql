type AggregateAward {
  count: Int!
}

type AggregateAwardVotes {
  count: Int!
}

type AggregateBarback {
  count: Int!
}

type AggregateNote {
  count: Int!
}

type AggregateNoteVotes {
  count: Int!
}

type Award {
  id: ID!
  name: String!
}

type AwardConnection {
  pageInfo: PageInfo!
  edges: [AwardEdge]!
  aggregate: AggregateAward!
}

input AwardCreateInput {
  id: ID
  name: String!
}

input AwardCreateOneInput {
  create: AwardCreateInput
  connect: AwardWhereUniqueInput
}

type AwardEdge {
  node: Award!
  cursor: String!
}

enum AwardOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type AwardPreviousValues {
  id: ID!
  name: String!
}

type AwardSubscriptionPayload {
  mutation: MutationType!
  node: Award
  updatedFields: [String!]
  previousValues: AwardPreviousValues
}

input AwardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AwardWhereInput
  AND: [AwardSubscriptionWhereInput!]
  OR: [AwardSubscriptionWhereInput!]
  NOT: [AwardSubscriptionWhereInput!]
}

input AwardUpdateDataInput {
  name: String
}

input AwardUpdateInput {
  name: String
}

input AwardUpdateManyMutationInput {
  name: String
}

input AwardUpdateOneRequiredInput {
  create: AwardCreateInput
  update: AwardUpdateDataInput
  upsert: AwardUpsertNestedInput
  connect: AwardWhereUniqueInput
}

input AwardUpsertNestedInput {
  update: AwardUpdateDataInput!
  create: AwardCreateInput!
}

type AwardVotes {
  id: ID!
  award: Award!
  voter: Barback!
}

type AwardVotesConnection {
  pageInfo: PageInfo!
  edges: [AwardVotesEdge]!
  aggregate: AggregateAwardVotes!
}

input AwardVotesCreateInput {
  id: ID
  award: AwardCreateOneInput!
  voter: BarbackCreateOneInput!
}

type AwardVotesEdge {
  node: AwardVotes!
  cursor: String!
}

enum AwardVotesOrderByInput {
  id_ASC
  id_DESC
}

type AwardVotesPreviousValues {
  id: ID!
}

type AwardVotesSubscriptionPayload {
  mutation: MutationType!
  node: AwardVotes
  updatedFields: [String!]
  previousValues: AwardVotesPreviousValues
}

input AwardVotesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AwardVotesWhereInput
  AND: [AwardVotesSubscriptionWhereInput!]
  OR: [AwardVotesSubscriptionWhereInput!]
  NOT: [AwardVotesSubscriptionWhereInput!]
}

input AwardVotesUpdateInput {
  award: AwardUpdateOneRequiredInput
  voter: BarbackUpdateOneRequiredInput
}

input AwardVotesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  award: AwardWhereInput
  voter: BarbackWhereInput
  AND: [AwardVotesWhereInput!]
  OR: [AwardVotesWhereInput!]
  NOT: [AwardVotesWhereInput!]
}

input AwardVotesWhereUniqueInput {
  id: ID
}

input AwardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [AwardWhereInput!]
  OR: [AwardWhereInput!]
  NOT: [AwardWhereInput!]
}

input AwardWhereUniqueInput {
  id: ID
}

type Barback {
  id: ID!
  name: String!
  email: String!
  password: String!
  giftee: Barback
  note(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
}

type BarbackConnection {
  pageInfo: PageInfo!
  edges: [BarbackEdge]!
  aggregate: AggregateBarback!
}

input BarbackCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  giftee: BarbackCreateOneInput
  note: NoteCreateManyWithoutCreatorInput
}

input BarbackCreateOneInput {
  create: BarbackCreateInput
  connect: BarbackWhereUniqueInput
}

input BarbackCreateOneWithoutNoteInput {
  create: BarbackCreateWithoutNoteInput
  connect: BarbackWhereUniqueInput
}

input BarbackCreateWithoutNoteInput {
  id: ID
  name: String!
  email: String!
  password: String!
  giftee: BarbackCreateOneInput
}

type BarbackEdge {
  node: Barback!
  cursor: String!
}

enum BarbackOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type BarbackPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type BarbackSubscriptionPayload {
  mutation: MutationType!
  node: Barback
  updatedFields: [String!]
  previousValues: BarbackPreviousValues
}

input BarbackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BarbackWhereInput
  AND: [BarbackSubscriptionWhereInput!]
  OR: [BarbackSubscriptionWhereInput!]
  NOT: [BarbackSubscriptionWhereInput!]
}

input BarbackUpdateDataInput {
  name: String
  email: String
  password: String
  giftee: BarbackUpdateOneInput
  note: NoteUpdateManyWithoutCreatorInput
}

input BarbackUpdateInput {
  name: String
  email: String
  password: String
  giftee: BarbackUpdateOneInput
  note: NoteUpdateManyWithoutCreatorInput
}

input BarbackUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input BarbackUpdateOneInput {
  create: BarbackCreateInput
  update: BarbackUpdateDataInput
  upsert: BarbackUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: BarbackWhereUniqueInput
}

input BarbackUpdateOneRequiredInput {
  create: BarbackCreateInput
  update: BarbackUpdateDataInput
  upsert: BarbackUpsertNestedInput
  connect: BarbackWhereUniqueInput
}

input BarbackUpdateOneRequiredWithoutNoteInput {
  create: BarbackCreateWithoutNoteInput
  update: BarbackUpdateWithoutNoteDataInput
  upsert: BarbackUpsertWithoutNoteInput
  connect: BarbackWhereUniqueInput
}

input BarbackUpdateWithoutNoteDataInput {
  name: String
  email: String
  password: String
  giftee: BarbackUpdateOneInput
}

input BarbackUpsertNestedInput {
  update: BarbackUpdateDataInput!
  create: BarbackCreateInput!
}

input BarbackUpsertWithoutNoteInput {
  update: BarbackUpdateWithoutNoteDataInput!
  create: BarbackCreateWithoutNoteInput!
}

input BarbackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  giftee: BarbackWhereInput
  note_every: NoteWhereInput
  note_some: NoteWhereInput
  note_none: NoteWhereInput
  AND: [BarbackWhereInput!]
  OR: [BarbackWhereInput!]
  NOT: [BarbackWhereInput!]
}

input BarbackWhereUniqueInput {
  id: ID
  name: String
  email: String
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createAward(data: AwardCreateInput!): Award!
  updateAward(data: AwardUpdateInput!, where: AwardWhereUniqueInput!): Award
  updateManyAwards(data: AwardUpdateManyMutationInput!, where: AwardWhereInput): BatchPayload!
  upsertAward(where: AwardWhereUniqueInput!, create: AwardCreateInput!, update: AwardUpdateInput!): Award!
  deleteAward(where: AwardWhereUniqueInput!): Award
  deleteManyAwards(where: AwardWhereInput): BatchPayload!
  createAwardVotes(data: AwardVotesCreateInput!): AwardVotes!
  updateAwardVotes(data: AwardVotesUpdateInput!, where: AwardVotesWhereUniqueInput!): AwardVotes
  upsertAwardVotes(where: AwardVotesWhereUniqueInput!, create: AwardVotesCreateInput!, update: AwardVotesUpdateInput!): AwardVotes!
  deleteAwardVotes(where: AwardVotesWhereUniqueInput!): AwardVotes
  deleteManyAwardVoteses(where: AwardVotesWhereInput): BatchPayload!
  createBarback(data: BarbackCreateInput!): Barback!
  updateBarback(data: BarbackUpdateInput!, where: BarbackWhereUniqueInput!): Barback
  updateManyBarbacks(data: BarbackUpdateManyMutationInput!, where: BarbackWhereInput): BatchPayload!
  upsertBarback(where: BarbackWhereUniqueInput!, create: BarbackCreateInput!, update: BarbackUpdateInput!): Barback!
  deleteBarback(where: BarbackWhereUniqueInput!): Barback
  deleteManyBarbacks(where: BarbackWhereInput): BatchPayload!
  createNote(data: NoteCreateInput!): Note!
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateManyNotes(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): BatchPayload!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  createNoteVotes(data: NoteVotesCreateInput!): NoteVotes!
  updateNoteVotes(data: NoteVotesUpdateInput!, where: NoteVotesWhereUniqueInput!): NoteVotes
  upsertNoteVotes(where: NoteVotesWhereUniqueInput!, create: NoteVotesCreateInput!, update: NoteVotesUpdateInput!): NoteVotes!
  deleteNoteVotes(where: NoteVotesWhereUniqueInput!): NoteVotes
  deleteManyNoteVoteses(where: NoteVotesWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Note {
  id: ID!
  text: String!
  creator: Barback!
}

type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  id: ID
  text: String!
  creator: BarbackCreateOneWithoutNoteInput!
}

input NoteCreateManyWithoutCreatorInput {
  create: [NoteCreateWithoutCreatorInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateOneInput {
  create: NoteCreateInput
  connect: NoteWhereUniqueInput
}

input NoteCreateWithoutCreatorInput {
  id: ID
  text: String!
}

type NoteEdge {
  node: Note!
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
}

type NotePreviousValues {
  id: ID!
  text: String!
}

input NoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [NoteScalarWhereInput!]
  OR: [NoteScalarWhereInput!]
  NOT: [NoteScalarWhereInput!]
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
  AND: [NoteSubscriptionWhereInput!]
  OR: [NoteSubscriptionWhereInput!]
  NOT: [NoteSubscriptionWhereInput!]
}

input NoteUpdateDataInput {
  text: String
  creator: BarbackUpdateOneRequiredWithoutNoteInput
}

input NoteUpdateInput {
  text: String
  creator: BarbackUpdateOneRequiredWithoutNoteInput
}

input NoteUpdateManyDataInput {
  text: String
}

input NoteUpdateManyMutationInput {
  text: String
}

input NoteUpdateManyWithoutCreatorInput {
  create: [NoteCreateWithoutCreatorInput!]
  delete: [NoteWhereUniqueInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [NoteScalarWhereInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
}

input NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyDataInput!
}

input NoteUpdateOneRequiredInput {
  create: NoteCreateInput
  update: NoteUpdateDataInput
  upsert: NoteUpsertNestedInput
  connect: NoteWhereUniqueInput
}

input NoteUpdateWithoutCreatorDataInput {
  text: String
}

input NoteUpdateWithWhereUniqueWithoutCreatorInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutCreatorDataInput!
}

input NoteUpsertNestedInput {
  update: NoteUpdateDataInput!
  create: NoteCreateInput!
}

input NoteUpsertWithWhereUniqueWithoutCreatorInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutCreatorDataInput!
  create: NoteCreateWithoutCreatorInput!
}

type NoteVotes {
  id: ID!
  voter: Barback!
  note: Note!
}

type NoteVotesConnection {
  pageInfo: PageInfo!
  edges: [NoteVotesEdge]!
  aggregate: AggregateNoteVotes!
}

input NoteVotesCreateInput {
  id: ID
  voter: BarbackCreateOneInput!
  note: NoteCreateOneInput!
}

type NoteVotesEdge {
  node: NoteVotes!
  cursor: String!
}

enum NoteVotesOrderByInput {
  id_ASC
  id_DESC
}

type NoteVotesPreviousValues {
  id: ID!
}

type NoteVotesSubscriptionPayload {
  mutation: MutationType!
  node: NoteVotes
  updatedFields: [String!]
  previousValues: NoteVotesPreviousValues
}

input NoteVotesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NoteVotesWhereInput
  AND: [NoteVotesSubscriptionWhereInput!]
  OR: [NoteVotesSubscriptionWhereInput!]
  NOT: [NoteVotesSubscriptionWhereInput!]
}

input NoteVotesUpdateInput {
  voter: BarbackUpdateOneRequiredInput
  note: NoteUpdateOneRequiredInput
}

input NoteVotesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  voter: BarbackWhereInput
  note: NoteWhereInput
  AND: [NoteVotesWhereInput!]
  OR: [NoteVotesWhereInput!]
  NOT: [NoteVotesWhereInput!]
}

input NoteVotesWhereUniqueInput {
  id: ID
}

input NoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  creator: BarbackWhereInput
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
}

input NoteWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  award(where: AwardWhereUniqueInput!): Award
  awards(where: AwardWhereInput, orderBy: AwardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Award]!
  awardsConnection(where: AwardWhereInput, orderBy: AwardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AwardConnection!
  awardVotes(where: AwardVotesWhereUniqueInput!): AwardVotes
  awardVoteses(where: AwardVotesWhereInput, orderBy: AwardVotesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AwardVotes]!
  awardVotesesConnection(where: AwardVotesWhereInput, orderBy: AwardVotesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AwardVotesConnection!
  barback(where: BarbackWhereUniqueInput!): Barback
  barbacks(where: BarbackWhereInput, orderBy: BarbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Barback]!
  barbacksConnection(where: BarbackWhereInput, orderBy: BarbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BarbackConnection!
  note(where: NoteWhereUniqueInput!): Note
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  noteVotes(where: NoteVotesWhereUniqueInput!): NoteVotes
  noteVoteses(where: NoteVotesWhereInput, orderBy: NoteVotesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NoteVotes]!
  noteVotesesConnection(where: NoteVotesWhereInput, orderBy: NoteVotesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteVotesConnection!
  node(id: ID!): Node
}

type Subscription {
  award(where: AwardSubscriptionWhereInput): AwardSubscriptionPayload
  awardVotes(where: AwardVotesSubscriptionWhereInput): AwardVotesSubscriptionPayload
  barback(where: BarbackSubscriptionWhereInput): BarbackSubscriptionPayload
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  noteVotes(where: NoteVotesSubscriptionWhereInput): NoteVotesSubscriptionPayload
}
